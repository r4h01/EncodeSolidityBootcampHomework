{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proposalNames",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "chairperson",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "giveRightToVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposal",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "winnerName_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningProposal_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7803112fe7f20f555a56880b1804149733635a68ee42abf46e25faefaec29dca",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1136863",
    "logsBloom": "0x
    "blockHash": "0x262c3cbd2eab7afd53e35e4b7ecb6c659a94be4e60306b41f66d7478b7667d82",
    "transactionHash": "0x7803112fe7f20f555a56880b1804149733635a68ee42abf46e25faefaec29dca",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1136863",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x50726f706f73616c203100000000000000000000000000000000000000000000",
      "0x50726f706f73616c203200000000000000000000000000000000000000000000",
      "0x50726f706f73616c203300000000000000000000000000000000000000000000"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "823005c7bfeee8fc7c39e49e8d5eb723",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalNames\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"chairperson\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"giveRightToVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"voted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"winnerName_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"winningProposal_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"winningProposal()\":{\"details\":\"Computes the winning proposal taking all previous votes into account.\"}},\"title\":\"Voting with delegation.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Create a new ballot to choose one of `proposalNames`.\"},\"delegate(address)\":{\"notice\":\"Delegate your vote to the voter `to`.\"},\"vote(uint256)\":{\"notice\":\"Give your vote (including votes delegated to you) to proposal `proposals[proposal].name`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ballot.sol\":\"Ballot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Voting with delegation.\\ncontract Ballot {\\n    // This declares a new complex type which will\\n    // be used for variables later.\\n    // It will represent a single voter.\\n    struct Voter {\\n        uint weight; // weight is accumulated by delegation\\n        bool voted;  // if true, that person already voted\\n        address delegate; // person delegated to\\n        uint vote;   // index of the voted proposal\\n    }\\n\\n    // This is a type for a single proposal.\\n    struct Proposal {\\n        bytes32 name;   // short name (up to 32 bytes)\\n        uint voteCount; // number of accumulated votes\\n    }\\n\\n    address public chairperson;\\n\\n    // This declares a state variable that\\n    // stores a `Voter` struct for each possible address.\\n    mapping(address => Voter) public voters;\\n\\n    // A dynamically-sized array of `Proposal` structs.\\n    Proposal[] public proposals;\\n\\n    /// Create a new ballot to choose one of `proposalNames`.\\n    constructor(bytes32[] memory proposalNames) {\\n        chairperson = msg.sender;\\n        voters[chairperson].weight = 1;\\n\\n        // For each of the provided proposal names,\\n        // create a new proposal object and add it\\n        // to the end of the array.\\n        for (uint i = 0; i < proposalNames.length; i++) {\\n            // `Proposal({...})` creates a temporary\\n            // Proposal object and `proposals.push(...)`\\n            // appends it to the end of `proposals`.\\n            proposals.push(Proposal({\\n                name: proposalNames[i],\\n                voteCount: 0\\n            }));\\n        }\\n    }\\n\\n    // Give `voter` the right to vote on this ballot.\\n    // May only be called by `chairperson`.\\n    function giveRightToVote(address voter) external {\\n        // If the first argument of `require` evaluates\\n        // to `false`, execution terminates and all\\n        // changes to the state and to Ether balances\\n        // are reverted.\\n        // This used to consume all gas in old EVM versions, but\\n        // not anymore.\\n        // It is often a good idea to use `require` to check if\\n        // functions are called correctly.\\n        // As a second argument, you can also provide an\\n        // explanation about what went wrong.\\n        require(\\n            msg.sender == chairperson,\\n            \\\"Only chairperson can give right to vote.\\\"\\n        );\\n        require(\\n            !voters[voter].voted,\\n            \\\"The voter already voted.\\\"\\n        );\\n        require(voters[voter].weight == 0);\\n        voters[voter].weight = 1;\\n    }\\n\\n    /// Delegate your vote to the voter `to`.\\n    function delegate(address to) external {\\n        // assigns reference\\n        Voter storage sender = voters[msg.sender];\\n        require(sender.weight != 0, \\\"You have no right to vote\\\");\\n        require(!sender.voted, \\\"You already voted.\\\");\\n\\n        require(to != msg.sender, \\\"Self-delegation is disallowed.\\\");\\n\\n        // Forward the delegation as long as\\n        // `to` also delegated.\\n        // In general, such loops are very dangerous,\\n        // because if they run too long, they might\\n        // need more gas than is available in a block.\\n        // In this case, the delegation will not be executed,\\n        // but in other situations, such loops might\\n        // cause a contract to get \\\"stuck\\\" completely.\\n        while (voters[to].delegate != address(0)) {\\n            to = voters[to].delegate;\\n\\n            // We found a loop in the delegation, not allowed.\\n            require(to != msg.sender, \\\"Found loop in delegation.\\\");\\n        }\\n\\n        Voter storage delegate_ = voters[to];\\n\\n        // Voters cannot delegate to accounts that cannot vote.\\n        require(delegate_.weight >= 1);\\n\\n        // Since `sender` is a reference, this\\n        // modifies `voters[msg.sender]`.\\n        sender.voted = true;\\n        sender.delegate = to;\\n\\n        if (delegate_.voted) {\\n            // If the delegate already voted,\\n            // directly add to the number of votes\\n            proposals[delegate_.vote].voteCount += sender.weight;\\n        } else {\\n            // If the delegate did not vote yet,\\n            // add to her weight.\\n            delegate_.weight += sender.weight;\\n        }\\n    }\\n\\n    /// Give your vote (including votes delegated to you)\\n    /// to proposal `proposals[proposal].name`.\\n    function vote(uint proposal) external {\\n        Voter storage sender = voters[msg.sender];\\n        require(sender.weight != 0, \\\"Has no right to vote\\\");\\n        require(!sender.voted, \\\"Already voted.\\\");\\n        sender.voted = true;\\n        sender.vote = proposal;\\n\\n        // If `proposal` is out of the range of the array,\\n        // this will throw automatically and revert all\\n        // changes.\\n        proposals[proposal].voteCount += sender.weight;\\n    }\\n\\n    /// @dev Computes the winning proposal taking all\\n    /// previous votes into account.\\n    function winningProposal() public view\\n            returns (uint winningProposal_)\\n    {\\n        uint winningVoteCount = 0;\\n        for (uint p = 0; p < proposals.length; p++) {\\n            if (proposals[p].voteCount > winningVoteCount) {\\n                winningVoteCount = proposals[p].voteCount;\\n                winningProposal_ = p;\\n            }\\n        }\\n    }\\n\\n    // Calls winningProposal() function to get the index\\n    // of the winner contained in the proposals array and then\\n    // returns the name of the winner\\n    function winnerName() external view\\n            returns (bytes32 winnerName_)\\n    {\\n        winnerName_ = proposals[winningProposal()].name;\\n    }\\n}\",\"keccak256\":\"0xd37abff02a8f8031567182b5235d1846000d1dea649d5a7f5533336e5a184e3b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200152b3803806200152b833981810160405281019062000037919062000342565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060005b81518110156200017657600260405180604001604052808484815181106200010f576200010e62000393565b5b60200260200101518152602001600081525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505080806200016d90620003fb565b915050620000e2565b505062000449565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001e28262000197565b810181811067ffffffffffffffff82111715620002045762000203620001a8565b5b80604052505050565b6000620002196200017e565b9050620002278282620001d7565b919050565b600067ffffffffffffffff8211156200024a5762000249620001a8565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b620002758162000260565b81146200028157600080fd5b50565b60008151905062000295816200026a565b92915050565b6000620002b2620002ac846200022c565b6200020d565b90508083825260208201905060208402830185811115620002d857620002d76200025b565b5b835b81811015620003055780620002f0888262000284565b845260208401935050602081019050620002da565b5050509392505050565b600082601f83011262000327576200032662000192565b5b8151620003398482602086016200029b565b91505092915050565b6000602082840312156200035b576200035a62000188565b5b600082015167ffffffffffffffff8111156200037c576200037b6200018d565b5b6200038a848285016200030f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b60006200040882620003f1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156200043e576200043d620003c2565b5b600182019050919050565b6110d280620004596000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063609ff1bd1161005b578063609ff1bd146101145780639e7b8d6114610132578063a3ec138d1461014e578063e2ba53f01461018157610088565b80630121b93f1461008d578063013cf08b146100a95780632e4176cf146100da5780635c19a95c146100f8575b600080fd5b6100a760048036038101906100a29190610a3f565b61019f565b005b6100c360048036038101906100be9190610a3f565b6102e6565b6040516100d1929190610a94565b60405180910390f35b6100e261031a565b6040516100ef9190610afe565b60405180910390f35b610112600480360381019061010d9190610b45565b61033e565b005b61011c610734565b6040516101299190610b72565b60405180910390f35b61014c60048036038101906101479190610b45565b6107bc565b005b61016860048036038101906101639190610b45565b610973565b6040516101789493929190610ba8565b60405180910390f35b6101896109d0565b6040516101969190610bed565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154141561022a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022190610c65565b60405180910390fd5b8060010160009054906101000a900460ff161561027c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027390610cd1565b60405180910390fd5b60018160010160006101000a81548160ff0219169083151502179055508181600201819055508060000154600283815481106102bb576102ba610cf1565b5b906000526020600020906002020160010160008282546102db9190610d4f565b925050819055505050565b600281815481106102f657600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414156103c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c090610df1565b60405180910390fd5b8060010160009054906101000a900460ff161561041b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041290610e5d565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561048a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048190610ec9565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105fa57600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156105f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ec90610f35565b60405180910390fd5b61048b565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000154101561064f57600080fd5b60018260010160006101000a81548160ff021916908315150217905550828260010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010160009054906101000a900460ff161561070f57816000015460028260020154815481106106e3576106e2610cf1565b5b906000526020600020906002020160010160008282546107039190610d4f565b9250508190555061072f565b81600001548160000160008282546107279190610d4f565b925050819055505b505050565b6000806000905060005b6002805490508110156107b75781600282815481106107605761075f610cf1565b5b90600052602060002090600202016001015411156107a4576002818154811061078c5761078b610cf1565b5b90600052602060002090600202016001015491508092505b80806107af90610f55565b91505061073e565b505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461084a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084190611010565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16156108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d19061107c565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541461092957600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b600060026109dc610734565b815481106109ed576109ec610cf1565b5b906000526020600020906002020160000154905090565b600080fd5b6000819050919050565b610a1c81610a09565b8114610a2757600080fd5b50565b600081359050610a3981610a13565b92915050565b600060208284031215610a5557610a54610a04565b5b6000610a6384828501610a2a565b91505092915050565b6000819050919050565b610a7f81610a6c565b82525050565b610a8e81610a09565b82525050565b6000604082019050610aa96000830185610a76565b610ab66020830184610a85565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ae882610abd565b9050919050565b610af881610add565b82525050565b6000602082019050610b136000830184610aef565b92915050565b610b2281610add565b8114610b2d57600080fd5b50565b600081359050610b3f81610b19565b92915050565b600060208284031215610b5b57610b5a610a04565b5b6000610b6984828501610b30565b91505092915050565b6000602082019050610b876000830184610a85565b92915050565b60008115159050919050565b610ba281610b8d565b82525050565b6000608082019050610bbd6000830187610a85565b610bca6020830186610b99565b610bd76040830185610aef565b610be46060830184610a85565b95945050505050565b6000602082019050610c026000830184610a76565b92915050565b600082825260208201905092915050565b7f486173206e6f20726967687420746f20766f7465000000000000000000000000600082015250565b6000610c4f601483610c08565b9150610c5a82610c19565b602082019050919050565b60006020820190508181036000830152610c7e81610c42565b9050919050565b7f416c726561647920766f7465642e000000000000000000000000000000000000600082015250565b6000610cbb600e83610c08565b9150610cc682610c85565b602082019050919050565b60006020820190508181036000830152610cea81610cae565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d5a82610a09565b9150610d6583610a09565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d9a57610d99610d20565b5b828201905092915050565b7f596f752068617665206e6f20726967687420746f20766f746500000000000000600082015250565b6000610ddb601983610c08565b9150610de682610da5565b602082019050919050565b60006020820190508181036000830152610e0a81610dce565b9050919050565b7f596f7520616c726561647920766f7465642e0000000000000000000000000000600082015250565b6000610e47601283610c08565b9150610e5282610e11565b602082019050919050565b60006020820190508181036000830152610e7681610e3a565b9050919050565b7f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e0000600082015250565b6000610eb3601e83610c08565b9150610ebe82610e7d565b602082019050919050565b60006020820190508181036000830152610ee281610ea6565b9050919050565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e00000000000000600082015250565b6000610f1f601983610c08565b9150610f2a82610ee9565b602082019050919050565b60006020820190508181036000830152610f4e81610f12565b9050919050565b6000610f6082610a09565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f9357610f92610d20565b5b600182019050919050565b7f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008201527f746f20766f74652e000000000000000000000000000000000000000000000000602082015250565b6000610ffa602883610c08565b915061100582610f9e565b604082019050919050565b6000602082019050818103600083015261102981610fed565b9050919050565b7f54686520766f74657220616c726561647920766f7465642e0000000000000000600082015250565b6000611066601883610c08565b915061107182611030565b602082019050919050565b6000602082019050818103600083015261109581611059565b905091905056fea264697066735822122034eefc968cdc303532300c3cb77ed8830f355fe8b64996faa61512505d2459c164736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063609ff1bd1161005b578063609ff1bd146101145780639e7b8d6114610132578063a3ec138d1461014e578063e2ba53f01461018157610088565b80630121b93f1461008d578063013cf08b146100a95780632e4176cf146100da5780635c19a95c146100f8575b600080fd5b6100a760048036038101906100a29190610a3f565b61019f565b005b6100c360048036038101906100be9190610a3f565b6102e6565b6040516100d1929190610a94565b60405180910390f35b6100e261031a565b6040516100ef9190610afe565b60405180910390f35b610112600480360381019061010d9190610b45565b61033e565b005b61011c610734565b6040516101299190610b72565b60405180910390f35b61014c60048036038101906101479190610b45565b6107bc565b005b61016860048036038101906101639190610b45565b610973565b6040516101789493929190610ba8565b60405180910390f35b6101896109d0565b6040516101969190610bed565b60405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154141561022a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022190610c65565b60405180910390fd5b8060010160009054906101000a900460ff161561027c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027390610cd1565b60405180910390fd5b60018160010160006101000a81548160ff0219169083151502179055508181600201819055508060000154600283815481106102bb576102ba610cf1565b5b906000526020600020906002020160010160008282546102db9190610d4f565b925050819055505050565b600281815481106102f657600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414156103c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c090610df1565b60405180910390fd5b8060010160009054906101000a900460ff161561041b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041290610e5d565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561048a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048190610ec9565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105fa57600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156105f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ec90610f35565b60405180910390fd5b61048b565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000154101561064f57600080fd5b60018260010160006101000a81548160ff021916908315150217905550828260010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010160009054906101000a900460ff161561070f57816000015460028260020154815481106106e3576106e2610cf1565b5b906000526020600020906002020160010160008282546107039190610d4f565b9250508190555061072f565b81600001548160000160008282546107279190610d4f565b925050819055505b505050565b6000806000905060005b6002805490508110156107b75781600282815481106107605761075f610cf1565b5b90600052602060002090600202016001015411156107a4576002818154811061078c5761078b610cf1565b5b90600052602060002090600202016001015491508092505b80806107af90610f55565b91505061073e565b505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461084a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084190611010565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16156108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d19061107c565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541461092957600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b600060026109dc610734565b815481106109ed576109ec610cf1565b5b906000526020600020906002020160000154905090565b600080fd5b6000819050919050565b610a1c81610a09565b8114610a2757600080fd5b50565b600081359050610a3981610a13565b92915050565b600060208284031215610a5557610a54610a04565b5b6000610a6384828501610a2a565b91505092915050565b6000819050919050565b610a7f81610a6c565b82525050565b610a8e81610a09565b82525050565b6000604082019050610aa96000830185610a76565b610ab66020830184610a85565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ae882610abd565b9050919050565b610af881610add565b82525050565b6000602082019050610b136000830184610aef565b92915050565b610b2281610add565b8114610b2d57600080fd5b50565b600081359050610b3f81610b19565b92915050565b600060208284031215610b5b57610b5a610a04565b5b6000610b6984828501610b30565b91505092915050565b6000602082019050610b876000830184610a85565b92915050565b60008115159050919050565b610ba281610b8d565b82525050565b6000608082019050610bbd6000830187610a85565b610bca6020830186610b99565b610bd76040830185610aef565b610be46060830184610a85565b95945050505050565b6000602082019050610c026000830184610a76565b92915050565b600082825260208201905092915050565b7f486173206e6f20726967687420746f20766f7465000000000000000000000000600082015250565b6000610c4f601483610c08565b9150610c5a82610c19565b602082019050919050565b60006020820190508181036000830152610c7e81610c42565b9050919050565b7f416c726561647920766f7465642e000000000000000000000000000000000000600082015250565b6000610cbb600e83610c08565b9150610cc682610c85565b602082019050919050565b60006020820190508181036000830152610cea81610cae565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d5a82610a09565b9150610d6583610a09565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d9a57610d99610d20565b5b828201905092915050565b7f596f752068617665206e6f20726967687420746f20766f746500000000000000600082015250565b6000610ddb601983610c08565b9150610de682610da5565b602082019050919050565b60006020820190508181036000830152610e0a81610dce565b9050919050565b7f596f7520616c726561647920766f7465642e0000000000000000000000000000600082015250565b6000610e47601283610c08565b9150610e5282610e11565b602082019050919050565b60006020820190508181036000830152610e7681610e3a565b9050919050565b7f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e0000600082015250565b6000610eb3601e83610c08565b9150610ebe82610e7d565b602082019050919050565b60006020820190508181036000830152610ee281610ea6565b9050919050565b7f466f756e64206c6f6f7020696e2064656c65676174696f6e2e00000000000000600082015250565b6000610f1f601983610c08565b9150610f2a82610ee9565b602082019050919050565b60006020820190508181036000830152610f4e81610f12565b9050919050565b6000610f6082610a09565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f9357610f92610d20565b5b600182019050919050565b7f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008201527f746f20766f74652e000000000000000000000000000000000000000000000000602082015250565b6000610ffa602883610c08565b915061100582610f9e565b604082019050919050565b6000602082019050818103600083015261102981610fed565b9050919050565b7f54686520766f74657220616c726561647920766f7465642e0000000000000000600082015250565b6000611066601883610c08565b915061107182611030565b602082019050919050565b6000602082019050818103600083015261109581611059565b905091905056fea264697066735822122034eefc968cdc303532300c3cb77ed8830f355fe8b64996faa61512505d2459c164736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "winningProposal()": {
        "details": "Computes the winning proposal taking all previous votes into account."
      }
    },
    "title": "Voting with delegation.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Create a new ballot to choose one of `proposalNames`."
      },
      "delegate(address)": {
        "notice": "Delegate your vote to the voter `to`."
      },
      "vote(uint256)": {
        "notice": "Give your vote (including votes delegated to you) to proposal `proposals[proposal].name`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "chairperson",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "voters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Voter)11_storage)"
      },
      {
        "astId": 27,
        "contract": "contracts/Ballot.sol:Ballot",
        "label": "proposals",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Proposal)16_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)16_storage)dyn_storage": {
        "base": "t_struct(Proposal)16_storage",
        "encoding": "dynamic_array",
        "label": "struct Ballot.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Voter)11_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Ballot.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)11_storage"
      },
      "t_struct(Proposal)16_storage": {
        "encoding": "inplace",
        "label": "struct Ballot.Proposal",
        "members": [
          {
            "astId": 13,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 15,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voter)11_storage": {
        "encoding": "inplace",
        "label": "struct Ballot.Voter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "weight",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "voted",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 8,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "delegate",
            "offset": 1,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10,
            "contract": "contracts/Ballot.sol:Ballot",
            "label": "vote",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}